#!/usr/bin/env python
import os,subprocess,re,sys,argparse,random
from mutagen.id3 import ID3
import mutagen.mp4
homedir = os.path.expanduser('~')
musicdir = homedir + '/Music/'
music_data = {}
music_genre = {}
query_artist = None
query_genre = None
try:
    files = os.listdir(musicdir)
except Exception as dir_except:
    print dir_except
    sys.exit(1)

#print files
def play_music(musicfile,title,artist):
    DEVNULL = open(os.devnull,'w')
    subprocess.call(['xdg-open', musicfile],stdout=DEVNULL,stderr=subprocess.STDOUT)
    print 'Playing ',title+' By '+artist

'''
mutagen.id3.ID3 attribute's:
TPE1 [u'Pink Floyd']
TENC [u'Exact Audio Copy   (Secure mode)']
TDRC [u'2011']
TIT2 [u'Hey You']
COMM::eng [u'http://www.bubaneemusic.com/ \r\nhttp://www.thelocalbay.com/']
TRCK [u'01']
TLEN [u'280946']
TPOS [u'1/1']
TALB [u'The Best Of Pink Floyd - A Foot In The Door']
TSSE [u'LAME.EXE -V 0 --vbr-new']
TCON [u'Progressive Rock']
'''
def get_title(var):
    if re.search(r'mp3',var):
        music = ID3(var)
        try:
            val = str(music['TIT2'].text[0])
        except:
            val = os.path.basename(var)
    else:
        music = mutagen.mp4.MP4(var)
        try:
            val = music['\xa9nam'][0]
        except:
            val = os.path.basename(var)
    return val

def get_artist(var):
    if re.search(r'mp3',var):
        music = ID3(var)
        try:
            val = music['TPE1'].text[0]
        except:
            val = 'artistnotfound'
    else:
        music = mutagen.mp4.MP4(var)
        try:
            val = music['\xa9ART'][0]
        except:
            val = 'artistnotfound'
    return val

def get_genre(var):
    if re.search(r'mp3',var):
        music = ID3(var)
        try:
            val = music['TCON'].text[0]
        except:
            val = 'genrenotfound'
    else:
        music = mutagen.mp4.MP4(var)
        try:
            val = music['\xa9gen'][0]
        except:
            val = 'genrenotfound'      
    return val

#to reduce nesting in getmusicattr function
def get_nasty_artist(args,artist):
    if re.search(r'\b%s\b'%list2str(args.artist), artist, re.IGNORECASE):
        return True
    else:
        return False

def get_nasty_genre(args,genre):
    if re.search(r'\b%s\b'%list2str(args.genre), genre, re.IGNORECASE):
        return True
    else:
        return False

def list2str(val):
    val = ' '.join(val)
    #print 'list2str',val
    return val
def query_result(args):
    artist = []
    if not query_genre and not query_artist:
        print "Query Failed"
        return None
    if args.genre:
        artist.extend(music_genre[query_genre])
        
    elif args.artist:
        artist.append(query_artist)
        
    for name in artist:
        print "->",name
        for song in music_data[name]:
            print "---",song

#size of set title > genre > artist
def getmusicattr(args):
    global music_data,music_genre,query_artist,query_genre
    for musicfile in sorted(files):
        mpath = os.path.abspath(os.path.join(musicdir,musicfile))
        
        if not re.search(r'\.(mp3|m4a)',musicfile,re.IGNORECASE):
            if args.title and re.search(r'\b%s\b'%list2str(args.title),musicfile,re.IGNORECASE):
                return mpath,musicfile,'Unknown'
            else:
                continue

        title = get_title(mpath)
        artist = get_artist(mpath)
        genre = get_genre(mpath)
        if not music_genre.has_key(genre):
            music_genre[genre]=[]
        if not music_data.has_key(artist):
            music_data[artist]=[title]
            music_genre[genre].append(artist)
        else:
            music_data[artist].append(title)
        if args.title:
            if re.search(r'\b%s\b'%list2str(args.title),title,re.IGNORECASE):
                if args.genre and get_nasty_genre(args, genre):
                    if args.artist and get_nastry_artist(args, artist):
                        return mpath,title,artist
                    elif not args.artist:
                        return mpath,title,artist
                elif args.artist and get_nasty_artist(args, artist):
                    return mpath,title,artist
                elif not args.artist and not args.genre:
                    return mpath,title,artist
        
        elif args.genre and get_nasty_genre(args, genre):
            query_genre = genre
            if args.artist and get_nasty_artist(args, artist):
                if not args.query:
                    return mpath,title,artist
                else:
                    query_artist = artist
            elif not args.artist:
                if not args.query:
                    return mpath,title,artist
                else:
                    query_artist = None

        elif args.artist and get_nasty_artist(args, artist):
            if not args.query:
                return mpath,title,artist
            else:
                query_artist = artist
        
    return None,None,None
def main(args):
    path,title,artist = getmusicattr(args)
    if args.query:
        query_result(args)
        sys.exit(1)
    if not path:
        print 'No match found for given query'
        sys.exit(1)
    play_music(path,title,artist)        
      

if __name__=='__main__': 
    parser = argparse.ArgumentParser(description='Play any mp3 song according to song\'s title,artist,genre etc.',epilog='Just Type Xplay without any argument for random song selection')
    parser.add_argument('-g','--genre',nargs='+',help='play song of the given genre')
    parser.add_argument('-a','--artist',nargs='+',help='play song of the given artist')
    parser.add_argument('-t','--title',nargs='+',help='play song of the given title')
    parser.add_argument('-q','--query',action='store_true',help='display result for query followed by artist/genre name.')
    
    args = parser.parse_args()
    if args.title or args.genre or args.query or args.artist:
        main(args)
    else:
        #shuffle
        songpath = os.path.abspath(os.path.join(musicdir,random.choice(files)))
        play_music(songpath,get_title(songpath),get_artist(songpath))
        
